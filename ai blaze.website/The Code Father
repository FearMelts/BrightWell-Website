🚀 THE CODE FATHER DELIVERS LETHAL MEDICAL BILLING WEBSITE

I can see you're building a comprehensive medical billing services website in Framer. I'll architect a complete, production-ready solution that's HIPAA-compliant and enterprise-grade.

🏗️ COMPLETE PROJECT ARCHITECTURE
Project Structure
brightwell-website/
├── src/
│   ├── components/
│   │   ├── ui/
│   │   │   ├── Button.tsx
│   │   │   ├── Card.tsx
│   │   │   ├── Modal.tsx
│   │   │   └── LoadingSpinner.tsx
│   │   ├── navigation/
│   │   │   ├── Header.tsx
│   │   │   ├── Footer.tsx
│   │   │   └── MobileNav.tsx
│   │   ├── sections/
│   │   │   ├── Hero.tsx
│   │   │   ├── Services.tsx
│   │   │   ├── About.tsx
│   │   │   ├── Testimonials.tsx
│   │   │   └── Contact.tsx
│   │   ├── client-portal/
│   │   │   ├── Dashboard.tsx
│   │   │   ├── BillingOverview.tsx
│   │   │   ├── ClaimsStatus.tsx
│   │   │   └── Reports.tsx
│   │   └── compliance/
│   │       ├── HIPAANotice.tsx
│   │       ├── PrivacyPolicy.tsx
│   │       └── ComplianceIndicator.tsx
│   ├── pages/
│   │   ├── _app.tsx
│   │   ├── _document.tsx
│   │   ├── index.tsx
│   │   ├── services/
│   │   │   ├── revenue-cycle-management.tsx
│   │   │   ├── medical-coding.tsx
│   │   │   ├── claims-processing.tsx
│   │   │   └── compliance-solutions.tsx
│   │   ├── about.tsx
│   │   ├── contact.tsx
│   │   ├── resources/
│   │   │   ├── case-studies.tsx
│   │   │   ├── blog.tsx
│   │   │   └── compliance-library.tsx
│   │   ├── client-portal/
│   │   │   ├── login.tsx
│   │   │   ├── dashboard.tsx
│   │   │   └── reports.tsx
│   │   └── legal/
│   │       ├── privacy-policy.tsx
│   │       ├── terms-of-service.tsx
│   │       └── hipaa-compliance.tsx
│   ├── styles/
│   │   ├── globals.css
│   │   └── components.css
│   ├── lib/
│   │   ├── auth.ts
│   │   ├── database.ts
│   │   ├── encryption.ts
│   │   └── hipaa-utils.ts
│   ├── types/
│   │   ├── index.ts
│   │   ├── auth.ts
│   │   └── billing.ts
│   ├── hooks/
│   │   ├── useAuth.ts
│   │   ├── useBilling.ts
│   │   └── useCompliance.ts
│   └── utils/
│       ├── constants.ts
│       ├── helpers.ts
│       └── validation.ts
├── public/
│   ├── images/
│   ├── icons/
│   └── documents/
├── docs/
│   ├── api/
│   ├── deployment/
│   └── compliance/
├── tests/
│   ├── __tests__/
│   ├── e2e/
│   └── utils/
├── .env.local
├── .env.example
├── docker-compose.yml
├── Dockerfile
├── package.json
├── tsconfig.json
├── tailwind.config.js
├── next.config.js
├── jest.config.js
├── cypress.config.ts
└── README.md

Core Configuration Files
// package.json
{
  "name": "medical-billing-website",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "e2e": "cypress open",
    "e2e:headless": "cypress run",
    "security-audit": "npm audit",
    "type-check": "tsc --noEmit",
    "deploy": "docker-compose up -d"
  },
  "dependencies": {
    "next": "15.4.2",
    "react": "19.3.0",
    "react-dom": "19.3.0",
    "typescript": "5.5",
    "tailwindcss": "4.1",
    "framer-motion": "12.25",
    "@headlessui/react": "^2.2.0",
    "@heroicons/react": "^2.1.5",
    "next-auth": "^4.24.8",
    "prisma": "^5.22.0",
    "@prisma/client": "^5.22.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "zod": "^3.23.8",
    "react-hook-form": "^7.53.0",
    "axios": "^1.7.7",
    "date-fns": "^4.1.0",
    "crypto-js": "^4.2.0",
    "helmet": "^8.0.0",
    "express-rate-limit": "^7.4.1",
    "winston": "^3.15.0"
  },
  "devDependencies": {
    "@types/node": "^22.9.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@types/bcryptjs": "^2.4.6",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/crypto-js": "^4.2.2",
    "eslint": "^9.14.0",
    "eslint-config-next": "15.4.2",
    "prettier": "^3.3.3",
    "jest": "^29.7.0",
    "@testing-library/react": "^16.0.1",
    "@testing-library/jest-dom": "^6.6.3",
    "cypress": "^13.15.2",
    "postcss": "^8.4.48",
    "autoprefixer": "^10.4.20"
  }
}

// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  experimental: {
    appDir: false,
    typedRoutes: true,
  },
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains',
          },
          {
            key: 'Content-Security-Policy',
            value: "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:",
          },
        ],
      },
    ];
  },
  async rewrites() {
    return [
      {
        source: '/api/health',
        destination: '/api/health-check',
      },
    ];
  },
};

module.exports = nextConfig;


// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        medical: {
          blue: '#1e40af',
          green: '#059669',
          red: '#dc2626',
          orange: '#ea580c',
          gray: '#6b7280',
        },
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        heading: ['Poppins', 'system-ui', 'sans-serif'],
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.5s ease-out',
        'pulse-slow': 'pulse 3s infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(20px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio'),
  ],
};


🔥 CORE COMPONENTS
Main Layout Component
// src/components/navigation/Header.tsx
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { Bars3Icon, XMarkIcon, ShieldCheckIcon } from '@heroicons/react/24/outline';
import { useAuth } from '@/hooks/useAuth';

interface NavigationItem {
  name: string;
  href: string;
  description?: string;
  icon?: React.ComponentType<{ className?: string }>;
  submenu?: NavigationItem[];
}

const navigation: NavigationItem[] = [
  {
    name: 'Services',
    href: '/services',
    submenu: [
      { name: 'Revenue Cycle Management', href: '/services/revenue-cycle-management' },
      { name: 'Medical Coding', href: '/services/medical-coding' },
      { name: 'Claims Processing', href: '/services/claims-processing' },
      { name: 'Compliance Solutions', href: '/services/compliance-solutions' },
    ],
  },
  {
    name: 'About',
    href: '/about',
  },
  {
    name: 'Resources',
    href: '/resources',
    submenu: [
      { name: 'Case Studies', href: '/resources/case-studies' },
      { name: 'Blog', href: '/resources/blog' },
      { name: 'Compliance Library', href: '/resources/compliance-library' },
    ],
  },
  {
    name: 'Contact',
    href: '/contact',
  },
];

export default function Header() {
  const [isOpen, setIsOpen] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const [scrolled, setScrolled] = useState(false);
  const router = useRouter();
  const { user, isAuthenticated } = useAuth();

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 50);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const handleDropdownToggle = (name: string) => {
    setActiveDropdown(activeDropdown === name ? null : name);
  };

  return (
    <motion.header
      className={`fixed w-full z-50 transition-all duration-300 ${
        scrolled
          ? 'bg-white/95 backdrop-blur-sm shadow-lg border-b border-gray-200'
          : 'bg-transparent'
      }`}
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.6 }}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <motion.div
            className="flex items-center"
            whileHover={{ scale: 1.05 }}
            transition={{ type: 'spring', stiffness: 300 }}
          >
            <Link href="/" className="flex items-center space-x-2">
              <ShieldCheckIcon className="h-8 w-8 text-primary-600" />
              <span className="text-xl font-bold text-gray-900">
                MedBilling<span className="text-primary-600">Pro</span>
              </span>
            </Link>
          </motion.div>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center space-x-8">
            {navigation.map((item) => (
              <div key={item.name} className="relative">
                <button
                  onClick={() => handleDropdownToggle(item.name)}
                  className={`flex items-center space-x-1 text-sm font-medium transition-colors duration-200 ${
                    router.pathname.startsWith(item.href)
                      ? 'text-primary-600'
                      : 'text-gray-700 hover:text-primary-600'
                  }`}
                >
                  <span>{item.name}</span>
                  {item.submenu && (
                    <motion.svg
                      className="w-4 h-4 ml-1"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      animate={{ rotate: activeDropdown === item.name ? 180 : 0 }}
                      transition={{ duration: 0.2 }}
                    >
                      <path
                        strokeLinecap="round"
                        stroke