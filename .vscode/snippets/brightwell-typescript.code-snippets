{
  "Medical Billing Interface": {
    "prefix": "bwmedical",
    "body": [
      "export interface ${1:MedicalBilling}Data {",
      "  id: string;",
      "  patientId: string;",
      "  providerId: string;",
      "  claimNumber: string;",
      "  serviceDate: Date;",
      "  diagnoses: string[];",
      "  procedures: Procedure[];",
      "  totalAmount: number;",
      "  status: 'pending' | 'submitted' | 'approved' | 'denied' | 'paid';",
      "  insuranceInfo: InsuranceInfo;",
      "  createdAt: Date;",
      "  updatedAt: Date;",
      "}",
      "",
      "export interface Procedure {",
      "  code: string;",
      "  description: string;",
      "  amount: number;",
      "  quantity: number;",
      "}",
      "",
      "export interface InsuranceInfo {",
      "  primary: InsuranceProvider;",
      "  secondary?: InsuranceProvider;",
      "}",
      "",
      "export interface InsuranceProvider {",
      "  name: string;",
      "  policyNumber: string;",
      "  groupNumber?: string;",
      "  memberID: string;",
      "}",
      "$0",
    ],
    "description": "Medical Billing TypeScript Interfaces",
  },
  "API Response Type": {
    "prefix": "bwapi",
    "body": [
      "export interface ApiResponse<T = any> {",
      "  success: boolean;",
      "  data?: T;",
      "  error?: {",
      "    code: string;",
      "    message: string;",
      "    details?: Record<string, any>;",
      "  };",
      "  meta?: {",
      "    page?: number;",
      "    limit?: number;",
      "    total?: number;",
      "    timestamp: string;",
      "  };",
      "}",
      "",
      "export interface ${1:Endpoint}Request {",
      "  $2",
      "}",
      "",
      "export interface ${1:Endpoint}Response {",
      "  $3",
      "}",
      "$0",
    ],
    "description": "BrightWell API Response Types",
  },
  "Form Validation Schema": {
    "prefix": "bwvalidation",
    "body": [
      "import { z } from 'zod';",
      "",
      "export const ${1:formName}Schema = z.object({",
      "  ${2:fieldName}: z.string().min(1, '${3:Field} is required'),",
      "  email: z.string().email('Please enter a valid email address'),",
      "  phone: z.string().regex(/^\\+?[1-9]\\d{1,14}$/, 'Please enter a valid phone number'),",
      "  $4",
      "});",
      "",
      "export type ${1/(.*)/${1:/capitalize}/}FormData = z.infer<typeof ${1:formName}Schema>;",
      "",
      "export const validate${1/(.*)/${1:/capitalize}/} = (data: unknown): ${1/(.*)/${1:/capitalize}/}FormData => {",
      "  return ${1:formName}Schema.parse(data);",
      "};",
      "$0",
    ],
    "description": "BrightWell Form Validation with Zod",
  },
  "Medical Service Type": {
    "prefix": "bwservice",
    "body": [
      "export interface MedicalService {",
      "  id: string;",
      "  name: string;",
      "  description: string;",
      "  category: 'billing' | 'coding' | 'credentialing' | 'consulting' | 'technology';",
      "  features: ServiceFeature[];",
      "  pricing: ServicePricing;",
      "  isActive: boolean;",
      "  metadata: {",
      "    hipaaCompliant: boolean;",
      "    certifications: string[];",
      "    supportLevel: 'basic' | 'premium' | 'enterprise';",
      "  };",
      "}",
      "",
      "export interface ServiceFeature {",
      "  name: string;",
      "  description: string;",
      "  included: boolean;",
      "  tier?: 'basic' | 'premium' | 'enterprise';",
      "}",
      "",
      "export interface ServicePricing {",
      "  model: 'percentage' | 'flat_rate' | 'per_claim' | 'monthly';",
      "  baseRate: number;",
      "  currency: 'USD';",
      "  discounts?: {",
      "    volume?: number;",
      "    annual?: number;",
      "  };",
      "}",
      "$0",
    ],
    "description": "Medical Service TypeScript Types",
  },
  "Error Handling Types": {
    "prefix": "bwerror",
    "body": [
      "export class BrightWellError extends Error {",
      "  constructor(",
      "    public code: string,",
      "    message: string,",
      "    public statusCode: number = 500,",
      "    public context?: Record<string, any>",
      "  ) {",
      "    super(message);",
      "    this.name = 'BrightWellError';",
      "  }",
      "}",
      "",
      "export interface ErrorResponse {",
      "  error: {",
      "    code: string;",
      "    message: string;",
      "    statusCode: number;",
      "    timestamp: string;",
      "    path?: string;",
      "    context?: Record<string, any>;",
      "  };",
      "}",
      "",
      "export const ErrorCodes = {",
      "  VALIDATION_ERROR: 'VALIDATION_ERROR',",
      "  AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',",
      "  AUTHORIZATION_ERROR: 'AUTHORIZATION_ERROR',",
      "  NOT_FOUND: 'NOT_FOUND',",
      "  BILLING_ERROR: 'BILLING_ERROR',",
      "  HIPAA_VIOLATION: 'HIPAA_VIOLATION',",
      "  SYSTEM_ERROR: 'SYSTEM_ERROR',",
      "} as const;",
      "",
      "export type ErrorCode = typeof ErrorCodes[keyof typeof ErrorCodes];",
      "$0",
    ],
    "description": "BrightWell Error Handling Types",
  },
  "React Props with Children": {
    "prefix": "bwprops",
    "body": [
      "export interface ${1:Component}Props {",
      "  children?: React.ReactNode;",
      "  className?: string;",
      "  ${2:customProp}: ${3:string};",
      "  onClick?: () => void;",
      "  disabled?: boolean;",
      "  loading?: boolean;",
      "  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';",
      "  size?: 'sm' | 'md' | 'lg' | 'xl';",
      "  $4",
      "}",
    ],
    "description": "BrightWell React Component Props Interface",
  },
  "Next.js API Route Types": {
    "prefix": "bwnextapi",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "",
      "export interface ${1:Endpoint}RequestBody {",
      "  $2",
      "}",
      "",
      "export interface ${1:Endpoint}ResponseData {",
      "  $3",
      "}",
      "",
      "export async function POST(request: NextRequest) {",
      "  try {",
      "    const body: ${1:Endpoint}RequestBody = await request.json();",
      "    ",
      "    // Validate request body",
      "    // Process request",
      "    ",
      "    const responseData: ${1:Endpoint}ResponseData = {",
      "      $4",
      "    };",
      "    ",
      "    return NextResponse.json({",
      "      success: true,",
      "      data: responseData,",
      "    });",
      "  } catch (error) {",
      "    return NextResponse.json(",
      "      {",
      "        success: false,",
      "        error: {",
      "          code: 'INTERNAL_ERROR',",
      "          message: 'An error occurred processing your request',",
      "        },",
      "      },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
      "$0",
    ],
    "description": "Next.js API Route with TypeScript",
  },
  "Zustand Store Definition": {
    "prefix": "bwstore",
    "body": [
      "import { create } from 'zustand';",
      "import { devtools, persist } from 'zustand/middleware';",
      "",
      "interface ${1:Store}State {",
      "  // State properties",
      "  ${2:data}: ${3:any}[];",
      "  loading: boolean;",
      "  error: string | null;",
      "  ",
      "  // Actions",
      "  set${2/(.*)/${2:/capitalize}/}: (${2:data}: ${3:any}[]) => void;",
      "  add${3/(.*)/${3:/capitalize}/}: (item: ${3:any}) => void;",
      "  remove${3/(.*)/${3:/capitalize}/}: (id: string) => void;",
      "  setLoading: (loading: boolean) => void;",
      "  setError: (error: string | null) => void;",
      "  reset: () => void;",
      "}",
      "",
      "const initialState = {",
      "  ${2:data}: [],",
      "  loading: false,",
      "  error: null,",
      "};",
      "",
      "export const use${1:Store} = create<${1:Store}State>()(",
      "  devtools(",
      "    persist(",
      "      (set, get) => ({",
      "        ...initialState,",
      "        ",
      "        set${2/(.*)/${2:/capitalize}/}: (${2:data}) => set({ ${2:data} }),",
      "        ",
      "        add${3/(.*)/${3:/capitalize}/}: (item) => set((state) => ({",
      "          ${2:data}: [...state.${2:data}, item],",
      "        })),",
      "        ",
      "        remove${3/(.*)/${3:/capitalize}/}: (id) => set((state) => ({",
      "          ${2:data}: state.${2:data}.filter((item) => item.id !== id),",
      "        })),",
      "        ",
      "        setLoading: (loading) => set({ loading }),",
      "        setError: (error) => set({ error }),",
      "        ",
      "        reset: () => set(initialState),",
      "      }),",
      "      {",
      "        name: '${1:store}-storage',",
      "        partialize: (state) => ({ ${2:data}: state.${2:data} }),",
      "      }",
      "    ),",
      "    { name: '${1:Store}' }",
      "  )",
      ");",
      "$0",
    ],
    "description": "Zustand Store with TypeScript and Persistence",
  },
}
