version: '3.8'

services:
  # === BRIGHTWELL WEBSITE ===
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: brightwell-website
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - brightwell-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # === PRODUCTION BUILD ===
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: brightwell-website-prod
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    networks:
      - brightwell-network
    restart: unless-stopped
    profiles:
      - production

  # === NGINX REVERSE PROXY ===
  nginx:
    image: nginx:alpine
    container_name: brightwell-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - brightwell-network
    restart: unless-stopped
    profiles:
      - production

  # === DATABASE (PostgreSQL for future use) ===
  database:
    image: postgres:15-alpine
    container_name: brightwell-db
    environment:
      - POSTGRES_DB=brightwell
      - POSTGRES_USER=brightwell_user
      - POSTGRES_PASSWORD=secure_password_change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - brightwell-network
    restart: unless-stopped
    profiles:
      - database

  # === REDIS CACHE ===
  redis:
    image: redis:7-alpine
    container_name: brightwell-redis
    command: redis-server --appendonly yes --requirepass redis_password_change_me
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - brightwell-network
    restart: unless-stopped
    profiles:
      - cache

  # === MONITORING (Prometheus) ===
  prometheus:
    image: prom/prometheus:latest
    container_name: brightwell-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - brightwell-network
    restart: unless-stopped
    profiles:
      - monitoring

  # === GRAFANA DASHBOARD ===
  grafana:
    image: grafana/grafana:latest
    container_name: brightwell-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_change_me
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - brightwell-network
    restart: unless-stopped
    profiles:
      - monitoring

  # === LOG AGGREGATION ===
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: brightwell-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - brightwell-network
    restart: unless-stopped
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: brightwell-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - brightwell-network
    restart: unless-stopped
    profiles:
      - logging

# === NETWORKS ===
networks:
  brightwell-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# === VOLUMES ===
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local